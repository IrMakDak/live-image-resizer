import os
import aiohttp
import base64
import hashlib
import time

from telegram import (
    Update,
)
from dotenv import load_dotenv
from functools import wraps
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from pathlib import Path

load_dotenv()


SERVER_PORT = int(os.getenv("SERVER_PORT", 5001))
SERVER_HOST = os.getenv("SERVER_HOST", "http://127.0.0.1")


SERVER_PATH = f"{SERVER_HOST}:{SERVER_PORT}"

RANDOM_IMAGE_ROUTE = "random-image"


TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")


UPLOAD_DIR = os.getenv("ORIGINALS_PATH", "../originals")


Path(UPLOAD_DIR).mkdir(exist_ok=True)


def handle_error():
    def decorator(func):
        @wraps(func)
        async def wrapper(
            update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs
        ):
            try:
                return await func(update, context, *args, **kwargs)
            except aiohttp.ClientError as e:
                if update.message is not None:
                    await update.message.reply_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {str(e)}"
                    )
                elif update.callback_query is not None:
                    await update.callback_query.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
                    )
            except Exception as e:
                if update.message is not None:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        return wrapper

    return decorator


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is not None:
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–∫—É –∏ —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–µ –≤ —Ä–∞–º–æ—á–∫–µ.\n"
            "/random - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–∫—É\n",
            "/delete <id> - —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ\n",
        )


# TODO: –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–∞–≤–∞—Ç—å id –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏?
@handle_error()
async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is not None:
        image = update.message.photo[-1]

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file = await context.bot.get_file(image.file_id)
        file_path = Path(UPLOAD_DIR) / f"{image.file_id}.jpg"
        if file_path.exists():
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å!")
            return

        await file.download_to_drive(file_path)
        if update.message is None:
            raise

        await update.message.reply_text(f"‚úÖ –ü–æ–ª—É—á–∏–ª!")


@handle_error()
async def get_random_image(update: Update, context: ContextTypes.DEFAULT_TYPE):

    async with aiohttp.ClientSession() as session:
        async with session.get(
            f"{SERVER_PATH}/{RANDOM_IMAGE_ROUTE}",
        ) as response:
            if response.status == 200 and update.message is not None:
                response_json = await response.json()
                image_base64 = response_json.get("image")
                image_data = base64.b64decode(image_base64)
                file_hash = str(response_json.get("file_hash"))

                await update.message.reply_photo(photo=image_data)
                await update.message.reply_text(
                    "üé≤ –í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Ñ–æ—Ç–∫–∞, –µ—ë id...\n–ù–∞–ø–∏—à–∏ /delete <id> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë",
                )
                await update.message.reply_text(
                    file_hash,
                )

            elif update.message is not None:
                error_data = await response.json()
                await update.message.reply_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )


async def delete_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message is not None:
        async with aiohttp.ClientSession() as session:

            # context.args —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
            if not context.args:
                await update.message.reply_text(
                    f"‚ùå –í—Å—Ç–∞–≤—å id —Ñ–æ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—É—é —É–¥–∞–ª–∏—Ç—å —Ö–æ—á–µ—à—å"
                )
                return

            file_hash = context.args[0]

            async with session.delete(
                f"{SERVER_PATH}/images/{file_hash}",
            ) as response:
                if response.status in (200, 204):
                    await update.message.reply_text(text="‚úÖ –§–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
                else:
                    await update.message.reply_text(text="‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")


def run_bot():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("random", get_random_image))
    application.add_handler(CommandHandler("delete", delete_image))
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))

    application.run_polling()


if __name__ == "__main__":
    run_bot()
