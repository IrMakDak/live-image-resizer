import os
import aiohttp
import base64

from telegram import (
    Update,
)
from dotenv import load_dotenv
from typing import Callable
from functools import wraps
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from pathlib import Path

load_dotenv()

RANDOM_IMAGE_ROUTE = "random-image"


def handle_error(error_message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error}"):

    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(
            self, update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs
        ):
            try:
                return await func(self, update, context, *args, **kwargs)

            except aiohttp.ClientError as e:
                if update.message:
                    await update.message.reply_text(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: " + str(e)
                    )
                elif update.callback_query:
                    await update.callback_query.answer(
                        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º"
                    )

            except ValueError as e:
                if update.message:
                    await update.message.reply_text(f"‚ùå {str(e)}")

            except Exception as e:
                if update.message:
                    await update.message.reply_text(error_message.format(error=str(e)))

            return None

        return wrapper

    return decorator


class Config:
    def __init__(self):
        load_dotenv()
        self.SERVER_PORT = int(os.getenv("SERVER_PORT", 5001))
        self.SERVER_HOST = os.getenv("SERVER_HOST", "http://127.0.0.1")
        self.SERVER_PATH = f"{self.SERVER_HOST}:{self.SERVER_PORT}"
        self.TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
        self.UPLOAD_DIR = Path(os.getenv("ORIGINALS_PATH", "../originals"))
        self.UPLOAD_DIR.mkdir(exist_ok=True)


class ImageAPIClient:
    def __init__(self, server_path: str):
        self.server_path = server_path

    async def get_random_image(self) -> tuple[bytes, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"{self.server_path}/{RANDOM_IMAGE_ROUTE}"
            ) as response:
                if response.status != 200:
                    error_data = await response.json()
                    raise ValueError(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {error_data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )

                response_json = await response.json()
                image_base64 = response_json.get("image")
                image_data = base64.b64decode(image_base64)
                file_hash = str(response_json.get("file_hash"))
                return image_data, file_hash

    async def delete_image(self, file_hash: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        async with aiohttp.ClientSession() as session:
            async with session.delete(
                f"{self.server_path}/images/{file_hash}"
            ) as response:
                return response.status in (200, 204)


class ImageBot:
    def __init__(self, config: Config):
        self.config = config
        self.api_client = ImageAPIClient(config.SERVER_PATH)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        if update.message:
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–∫—É –∏ —è –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –µ–µ –≤ —Ä–∞–º–æ—á–∫–µ.\n"
                "/random - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ñ–æ—Ç–∫—É\n"
                "/delete <id> - —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ\n"
            )

    # TODO: –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–¥–∞–≤–∞—Ç—å id –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏?
    @handle_error()
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
        if not update.message or not update.message.photo:
            return

        image = update.message.photo[-1]
        file = await context.bot.get_file(image.file_id)
        file_path = self.config.UPLOAD_DIR / f"{image.file_id}.jpg"

        if file_path.exists():
            await update.message.reply_text("‚ùå –¢–∞–∫–æ–µ —Ñ–æ—Ç–æ —É–∂–µ –µ—Å—Ç—å!")
            return

        await file.download_to_drive(file_path)
        await update.message.reply_text("‚úÖ –ü–æ–ª—É—á–∏–ª!")

    @handle_error()
    async def random_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random"""
        if not update.message:
            return

        try:
            image_data, file_hash = await self.api_client.get_random_image()
            await update.message.reply_photo(photo=image_data)
            await update.message.reply_text(
                "üé≤ –í–æ—Ç —Å–ª—É—á–∞–π–Ω–∞—è —Ñ–æ—Ç–∫–∞, –µ—ë id...\n"
                "–ù–∞–ø–∏—à–∏ /delete <id> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ—ë"
            )
            await update.message.reply_text(file_hash)
        except ValueError as e:
            await update.message.reply_text(f"‚ùå {str(e)}")

    @handle_error()
    async def delete_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete"""
        if not update.message:
            return

        if not context.args:
            await update.message.reply_text("‚ùå –í—Å—Ç–∞–≤—å id —Ñ–æ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—É—é —É–¥–∞–ª–∏—Ç—å —Ö–æ—á–µ—à—å")
            return

        file_hash = context.args[0]
        success = await self.api_client.delete_image(file_hash)

        if success:
            await update.message.reply_text("‚úÖ –§–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.config.TELEGRAM_TOKEN).build()

        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("random", self.random_command))
        application.add_handler(CommandHandler("delete", self.delete_command))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))

        application.run_polling()


def main():
    config = Config()
    bot = ImageBot(config)
    bot.run()


if __name__ == "__main__":
    main()
